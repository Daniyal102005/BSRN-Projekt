# connected UDP-Socket erstellen

import socket

teilnehmer = {}  # HashMap für Teilnehmer

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) #Socket erstellen
sock.bind(('', 4000))  #Hört auf Port 4000 zu
sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1) #Broadcast aktivieren

print("Discovery-Dienst läuft auf Port 4000...")


while True: #While-Schleife um auf eingehende Nachrichten zu warten
    daten, addresse= sock.recvfrom(1024)  # empfängt max. 1024 Bytes
    nachricht = daten.decode("utf-8").strip()  # wandelt Bytes zu Text um, entfernt \n etc.
    print(f"[Empfangen] {nachricht} von {addresse}")

    if nachricht.startswith("JOIN"):#Erstes Segment der Nachricht analysieren, Nachricht filtern und Teilnehmer in Liste aufnehmen
        _, handle, port = nachricht.split()
        ip = addresse[0]
        teilnehmer[handle] = (ip, int(port)) #Speichert den Teilnehmer in der Liste mit Name als Key und IP und Port als Value
        antwort = f"JOIN {handle} {port}"
        sock.sendto(antwort.encode("utf-8"), addresse)
        

    elif nachricht.startswith("LEAVE"):#Erstes Segment der Nachricht analysieren, Nachricht filtern und Teilnehmer aus Liste entfernen
        _, handle = nachricht.split()
        if handle in teilnehmer:
            del teilnehmer[handle] #Entfernt den Teilnehmer aus der Liste
            antwort = f"LEAVE {handle}" 
        else:
            antwort=f"[WARNUNG] {handle} nicht gefunden"
    

    elif nachricht == "WHO":#Teilnehmerliste ausgeben
        antwort= "KNOWUSERS: " + ", ".join(teilnehmer)
        sock.sendto(antwort.encode("utf-8"), addresse)
        
            
    else:
        antwort = "ERROR: Falsches Nachrichtenformat"
        sock.sendto(antwort.encode("utf-8"), addresse)
        print("Fehler. Falsches Nachrichtenformat.")

  
